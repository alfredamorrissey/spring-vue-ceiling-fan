{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\",\n  class: \"ceiling-fan\"\n};\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[4] || (_cache[4] = _createElementVNode(\"img\", {\n    src: \"/assets/ceiling-fan.png\",\n    alt: \"My Image\",\n    class: \"ceiling-fan-image\"\n  }, null, -1 /* HOISTED */)), _createElementVNode(\"div\", null, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.increaseSpeed && _ctx.increaseSpeed(...args))\n  }, \"Speed\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => _ctx.toggleDirection && _ctx.toggleDirection(...args))\n  }, \"Direction\")]), _createElementVNode(\"div\", null, [_createElementVNode(\"p\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"strong\", null, \"Direction:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(_ctx.direction), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"strong\", null, \"Speed:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(_ctx.speed), 1 /* TEXT */)])])]);\n}","map":{"version":3,"names":["id","class","_createElementBlock","_hoisted_1","_createElementVNode","src","alt","onClick","_cache","args","_ctx","increaseSpeed","toggleDirection","_createTextVNode","_toDisplayString","direction","speed"],"sources":["/Users/alfredamorrissey/Sites/spring-vue-ceiling-fan/vue-app/src/App.vue"],"sourcesContent":["<template>\n    <div id=\"app\" class=\"ceiling-fan\">\n        <img src=\"/assets/ceiling-fan.png\" alt=\"My Image\" class=\"ceiling-fan-image\" />\n        <div>\n            <button @click=\"increaseSpeed\" >Speed</button>\n            <button @click=\"toggleDirection\">Direction</button>\n        </div>\n        <div>\n            <p><strong>Direction:</strong> {{ direction }}</p>\n            <p><strong>Speed:</strong> {{ speed }}</p>\n        </div>\n\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            speed: 0,\n            direction: \"clockwise\",  // Initial direction\n            fanId: 1,                // Primary key of the ceiling fan,\n            mode: \"insert\"\n        };\n\n    },\n    mounted() {\n        // Fetch the initial values for the ceiling fan when the component mounts\n        this.fetchCeilingFan();\n    },\n    computed{\n        method() {\n            return this.mode == 'insert' ? '';\n        }\n    },\n    methods: {\n        async fetchCeilingFan() {\n            fetch('http://localhost:8080/api/fans')\n                .then(response => response.json())\n                .then(data => {\n                    console.log(data);\n                    if (data.length > 0) {\n                        //Use the first fan, we should only have one,\n                        //future iterations could assign fans to people and pull their fan\n                        this.speed = data[0].speed;\n                        this.direction = data[0].direction;\n                    }\n                })\n                .catch(error => {\n                    console.log('Error fetching fan:', error);\n                });\n\n        },\n        // Method to increase the fan speed\n        async increaseSpeed() {\n            const newSpeed = this.speed + 1 > 3 ? 0 : this.speed + 1;\n            const data = {\n                speed: newSpeed,\n                direction: this.direction\n            };\n\n            await this.updateCeilingFan(data);\n            this.speed = newSpeed;  // Update the local speed state\n        },\n\n        // Method to toggle the direction of the fan\n        async toggleDirection() {\n            const newDirection = this.direction === \"clockwise\" ? \"counter-clockwise\" : \"clockwise\";\n            const data = {\n                speed: this.speed,\n                direction: newDirection\n            };\n            await this.updateCeilingFan(data);\n            this.direction = newDirection;  // Update the local direction state\n        },\n\n        // Helper method to update the ceiling fan in the backend\n        async updateCeilingFan(data) {\n            fetch('http://localhost:8080/api/fans/1', {  // Assuming the fan's ID is 1\n                method: this.method,  // Specifies the request method\n                headers: {\n                    'Content-Type': 'application/json', // The type of content you're sending (JSON)\n                },\n                body: JSON.stringify(data),  // The updated data you're sending as JSON\n            })\n        },\n\n    }\n};\n</script>\n\n<style scoped>\n#app {\n    font-family: Avenir, Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-align: center;\n    color: #2c3e50;\n    margin-top: 60px;\n}\n\n.ceiling-fan {\n    text-align: center;\n    margin-top: 20px;;\n}\n\nbutton {\n    margin: 10px;\n    padding: 10px;\n    font-size: 16px;\n    cursor: pointer;\n}\n\nbutton:disabled {\n    cursor: not-allowed;\n    background-color: #ccc;\n}\n\n.ceiling-fan-image {\n    width: 50%;\n    height: auto;\n    border-radius: 8px;\n}\n</style>\n"],"mappings":";;EACSA,EAAE,EAAC,KAAK;EAACC,KAAK,EAAC;;;uBAApBC,mBAAA,CAWM,OAXNC,UAWM,G,0BAVFC,mBAAA,CAA8E;IAAzEC,GAAG,EAAC,yBAAyB;IAACC,GAAG,EAAC,UAAU;IAACL,KAAK,EAAC;+BACxDG,mBAAA,CAGM,cAFFA,mBAAA,CAA8C;IAArCG,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,IAAA,CAAAC,aAAA,IAAAD,IAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;KAAG,OAAK,GACrCL,mBAAA,CAAmD;IAA1CG,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,IAAA,CAAAE,eAAA,IAAAF,IAAA,CAAAE,eAAA,IAAAH,IAAA,CAAe;KAAE,WAAS,E,GAE9CL,mBAAA,CAGM,cAFFA,mBAAA,CAAkD,Y,0BAA/CA,mBAAA,CAA2B,gBAAnB,YAAU,sBARjCS,gBAAA,CAQ0C,GAAC,GAAAC,gBAAA,CAAGJ,IAAA,CAAAK,SAAS,iB,GAC3CX,mBAAA,CAA0C,Y,0BAAvCA,mBAAA,CAAuB,gBAAf,QAAM,sBAT7BS,gBAAA,CASsC,GAAC,GAAAC,gBAAA,CAAGJ,IAAA,CAAAM,KAAK,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}