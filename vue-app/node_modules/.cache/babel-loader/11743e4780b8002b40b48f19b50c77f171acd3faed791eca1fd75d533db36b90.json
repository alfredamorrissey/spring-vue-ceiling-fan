{"ast":null,"code":"export default {\n  data() {\n    return {\n      speed: 0,\n      direction: \"clockwise\",\n      // Initial direction\n      fanId: 1,\n      // Primary key of the ceiling fan,\n      mode: \"insert\"\n    };\n  },\n  mounted() {\n    // Fetch the initial values for the ceiling fan when the component mounts\n    this.fetchCeilingFan();\n  },\n  computed: {\n    method() {\n      return this.mode == 'insert' ? 'POST' : 'PUT';\n    }\n  },\n  methods: {\n    async fetchCeilingFan() {\n      fetch('http://localhost:8080/api/fans').then(response => response.json()).then(data => {\n        console.log(data);\n        if (data.length > 0) {\n          //Use the first fan, we should only have one,\n          //future iterations could assign fans to people and pull their fan\n          this.speed = data[0].speed;\n          this.direction = data[0].direction;\n        }\n      }).catch(error => {\n        console.log('Error fetching fan:', error);\n      });\n    },\n    // Method to increase the fan speed\n    async increaseSpeed() {\n      const newSpeed = this.speed + 1 > 3 ? 0 : this.speed + 1;\n      const data = {\n        speed: newSpeed,\n        direction: this.direction\n      };\n      await this.updateCeilingFan(data);\n      this.speed = newSpeed; // Update the local speed state\n    },\n    // Method to toggle the direction of the fan\n    async toggleDirection() {\n      const newDirection = this.direction === \"clockwise\" ? \"counter-clockwise\" : \"clockwise\";\n      const data = {\n        speed: this.speed,\n        direction: newDirection\n      };\n      await this.updateCeilingFan(data);\n      this.direction = newDirection; // Update the local direction state\n    },\n    // Helper method to update the ceiling fan in the backend\n    async updateCeilingFan(data) {\n      fetch('http://localhost:8080/api/fans/1', {\n        // Assuming the fan's ID is 1\n        method: this.method,\n        // Specifies the request method\n        headers: {\n          'Content-Type': 'application/json' // The type of content you're sending (JSON)\n        },\n        body: JSON.stringify(data) // The updated data you're sending as JSON\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","speed","direction","fanId","mode","mounted","fetchCeilingFan","computed","method","methods","fetch","then","response","json","console","log","length","catch","error","increaseSpeed","newSpeed","updateCeilingFan","toggleDirection","newDirection","headers","body","JSON","stringify"],"sources":["/Users/alfredamorrissey/Sites/spring-vue-ceiling-fan/vue-app/src/App.vue"],"sourcesContent":["<template>\n    <div id=\"app\" class=\"ceiling-fan\">\n        <img src=\"/assets/ceiling-fan.png\" alt=\"My Image\" class=\"ceiling-fan-image\" />\n        <div>\n            <button @click=\"increaseSpeed\" >Speed</button>\n            <button @click=\"toggleDirection\">Direction</button>\n        </div>\n        <div>\n            <p><strong>Direction:</strong> {{ direction }}</p>\n            <p><strong>Speed:</strong> {{ speed }}</p>\n        </div>\n\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            speed: 0,\n            direction: \"clockwise\",  // Initial direction\n            fanId: 1,                // Primary key of the ceiling fan,\n            mode: \"insert\"\n        };\n\n    },\n    mounted() {\n        // Fetch the initial values for the ceiling fan when the component mounts\n        this.fetchCeilingFan();\n    },\n    computed: {\n        method() {\n            return this.mode == 'insert' ? 'POST' : 'PUT';\n        }\n    },\n    methods: {\n        async fetchCeilingFan() {\n            fetch('http://localhost:8080/api/fans')\n                .then(response => response.json())\n                .then(data => {\n                    console.log(data);\n                    if (data.length > 0) {\n                        //Use the first fan, we should only have one,\n                        //future iterations could assign fans to people and pull their fan\n                        this.speed = data[0].speed;\n                        this.direction = data[0].direction;\n                    }\n                })\n                .catch(error => {\n                    console.log('Error fetching fan:', error);\n                });\n\n        },\n        // Method to increase the fan speed\n        async increaseSpeed() {\n            const newSpeed = this.speed + 1 > 3 ? 0 : this.speed + 1;\n            const data = {\n                speed: newSpeed,\n                direction: this.direction\n            };\n\n            await this.updateCeilingFan(data);\n            this.speed = newSpeed;  // Update the local speed state\n        },\n\n        // Method to toggle the direction of the fan\n        async toggleDirection() {\n            const newDirection = this.direction === \"clockwise\" ? \"counter-clockwise\" : \"clockwise\";\n            const data = {\n                speed: this.speed,\n                direction: newDirection\n            };\n            await this.updateCeilingFan(data);\n            this.direction = newDirection;  // Update the local direction state\n        },\n\n        // Helper method to update the ceiling fan in the backend\n        async updateCeilingFan(data) {\n            fetch('http://localhost:8080/api/fans/1', {  // Assuming the fan's ID is 1\n                method: this.method,  // Specifies the request method\n                headers: {\n                    'Content-Type': 'application/json', // The type of content you're sending (JSON)\n                },\n                body: JSON.stringify(data),  // The updated data you're sending as JSON\n            })\n        },\n\n    }\n};\n</script>\n\n<style scoped>\n#app {\n    font-family: Avenir, Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-align: center;\n    color: #2c3e50;\n    margin-top: 60px;\n}\n\n.ceiling-fan {\n    text-align: center;\n    margin-top: 20px;;\n}\n\nbutton {\n    margin: 10px;\n    padding: 10px;\n    font-size: 16px;\n    cursor: pointer;\n}\n\nbutton:disabled {\n    cursor: not-allowed;\n    background-color: #ccc;\n}\n\n.ceiling-fan-image {\n    width: 50%;\n    height: auto;\n    border-radius: 8px;\n}\n</style>\n"],"mappings":"AAgBA,eAAe;EACXA,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,KAAK,EAAE,CAAC;MACRC,SAAS,EAAE,WAAW;MAAG;MACzBC,KAAK,EAAE,CAAC;MAAiB;MACzBC,IAAI,EAAE;IACV,CAAC;EAEL,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN;IACA,IAAI,CAACC,eAAe,CAAC,CAAC;EAC1B,CAAC;EACDC,QAAQ,EAAE;IACNC,MAAMA,CAAA,EAAG;MACL,OAAO,IAAI,CAACJ,IAAG,IAAK,QAAO,GAAI,MAAK,GAAI,KAAK;IACjD;EACJ,CAAC;EACDK,OAAO,EAAE;IACL,MAAMH,eAAeA,CAAA,EAAG;MACpBI,KAAK,CAAC,gCAAgC,EACjCC,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAChCF,IAAI,CAACX,IAAG,IAAK;QACVc,OAAO,CAACC,GAAG,CAACf,IAAI,CAAC;QACjB,IAAIA,IAAI,CAACgB,MAAK,GAAI,CAAC,EAAE;UACjB;UACA;UACA,IAAI,CAACf,KAAI,GAAID,IAAI,CAAC,CAAC,CAAC,CAACC,KAAK;UAC1B,IAAI,CAACC,SAAQ,GAAIF,IAAI,CAAC,CAAC,CAAC,CAACE,SAAS;QACtC;MACJ,CAAC,EACAe,KAAK,CAACC,KAAI,IAAK;QACZJ,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEG,KAAK,CAAC;MAC7C,CAAC,CAAC;IAEV,CAAC;IACD;IACA,MAAMC,aAAaA,CAAA,EAAG;MAClB,MAAMC,QAAO,GAAI,IAAI,CAACnB,KAAI,GAAI,IAAI,IAAI,IAAI,IAAI,CAACA,KAAI,GAAI,CAAC;MACxD,MAAMD,IAAG,GAAI;QACTC,KAAK,EAAEmB,QAAQ;QACflB,SAAS,EAAE,IAAI,CAACA;MACpB,CAAC;MAED,MAAM,IAAI,CAACmB,gBAAgB,CAACrB,IAAI,CAAC;MACjC,IAAI,CAACC,KAAI,GAAImB,QAAQ,EAAG;IAC5B,CAAC;IAED;IACA,MAAME,eAAeA,CAAA,EAAG;MACpB,MAAMC,YAAW,GAAI,IAAI,CAACrB,SAAQ,KAAM,WAAU,GAAI,mBAAkB,GAAI,WAAW;MACvF,MAAMF,IAAG,GAAI;QACTC,KAAK,EAAE,IAAI,CAACA,KAAK;QACjBC,SAAS,EAAEqB;MACf,CAAC;MACD,MAAM,IAAI,CAACF,gBAAgB,CAACrB,IAAI,CAAC;MACjC,IAAI,CAACE,SAAQ,GAAIqB,YAAY,EAAG;IACpC,CAAC;IAED;IACA,MAAMF,gBAAgBA,CAACrB,IAAI,EAAE;MACzBU,KAAK,CAAC,kCAAkC,EAAE;QAAG;QACzCF,MAAM,EAAE,IAAI,CAACA,MAAM;QAAG;QACtBgB,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB,CAAE;QACxC,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC3B,IAAI,CAAC,CAAG;MACjC,CAAC;IACL;EAEJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}